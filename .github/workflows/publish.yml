name: Release — Build and Publish to npm

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch: {}

permissions:
  contents: read

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          registry-url: https://registry.npmjs.org

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - name: Install dependencies (with cache)
        run: pnpm install --frozen-lockfile
        env:
          NPM_CONFIG_CACHE: ~/.pnpm-store

      - name: Lint
        run: pnpm run lint

      - name: Build
        run: pnpm run build

      - name: Publish to npm
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: pnpm publish --access public

  notify-telegram:
    needs: publish
    runs-on: ubuntu-latest
    steps:
      - name: Prepare notification message
        id: prepare
        env:
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          GITHUB_EVENT_PATH: ${{ github.event_path }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_ACTOR: ${{ github.actor }}
        run: |
          python <<'PY'
          """Build a Telegram message summarizing the current GitHub event."""
          import json
          import os
          import pathlib

          event_name = os.environ["GITHUB_EVENT_NAME"]
          event_path = os.environ["GITHUB_EVENT_PATH"]
          repository = os.environ["GITHUB_REPOSITORY"]
          actor = os.environ["GITHUB_ACTOR"]

          with open(event_path, "r", encoding="utf-8") as handle:
            event = json.load(handle)

          if event_name == "release":
            release = event["release"]
            release_name = release.get("name") or release.get("tag_name")
            tag_name = release.get("tag_name")
            html_url = release.get("html_url")
            message = "".join(
              (
                "🚀 New release published\n",
                f"Repository: {repository}\n",
                f"Release: {release_name}\n",
                f"Tag: {tag_name}\n",
                f"Published by: {actor}\n",
                f"Details: {html_url}",
              )
            )
          else:
            ref = event.get("ref", "")
            tag_name = ref.split("/")[-1] if ref else ""
            html_url = f"https://github.com/{repository}/releases/tag/{tag_name}"
            message = "".join(
              (
                "🏷️ New tag pushed\n",
                f"Repository: {repository}\n",
                f"Tag: {tag_name}\n",
                f"Pushed by: {actor}\n",
                f"Details: {html_url}",
              )
            )

          output_path = pathlib.Path(os.environ["GITHUB_OUTPUT"])
          with open(output_path, "w", encoding="utf-8") as output_file:
            output_file.write("message<<EOF\n")
            output_file.write(message)
            output_file.write("\nEOF\n")
          PY

      - name: Send Telegram notification
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          TELEGRAM_MESSAGE: ${{ steps.prepare.outputs.message }}
        run: |
          set -euo pipefail
          if [ -z "${TELEGRAM_BOT_TOKEN}" ] || [ -z "${TELEGRAM_CHAT_ID}" ]; then
            echo "TELEGRAM_BOT_TOKEN and TELEGRAM_CHAT_ID secrets must be provided." >&2
            exit 1
          fi

          curl -sS -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
            --data-urlencode "chat_id=${TELEGRAM_CHAT_ID}" \
            --data-urlencode "text=${TELEGRAM_MESSAGE}"
